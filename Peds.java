// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class REGSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() throws MalformedURLException {
    driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), DesiredCapabilities.chrome());
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.sleep(timeout);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Set<String> whNow = driver.getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get("window_handles");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  @Test
  public void sMOKE() {
    // Test name: SMOKE
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | linkText=Filing or 371(c) Date | 
    driver.findElement(By.linkText("Filing or 371(c) Date")).click();
    // 5 | click | linkText=Application Type | 
    driver.findElement(By.linkText("Application Type")).click();
    // 6 | click | linkText=Examiner Name | 
    driver.findElement(By.linkText("Examiner Name")).click();
    // 7 | click | linkText=Group Art Unit | 
    driver.findElement(By.linkText("Group Art Unit")).click();
    // 8 | click | linkText=Class / SubClass | 
    driver.findElement(By.linkText("Class / SubClass")).click();
    // 9 | click | linkText=First Named Applicant | 
    driver.findElement(By.linkText("First Named Applicant")).click();
    // 10 | click | linkText=Earliest Publication Number | 
    driver.findElement(By.linkText("Earliest Publication Number")).click();
    // 11 | click | linkText=Patent Number | 
    driver.findElement(By.linkText("Patent Number")).click();
    // 12 | click | linkText=More Filters | 
    driver.findElement(By.linkText("More Filters")).click();
    // 13 | click | linkText=International Registration Number | 
    driver.findElement(By.linkText("International Registration Number")).click();
    // 14 | click | linkText=WIPO Publication Number | 
    driver.findElement(By.linkText("WIPO Publication Number")).click();
    // 15 | click | linkText=PCT Number | 
    driver.findElement(By.linkText("PCT Number")).click();
    // 16 | click | linkText=Status | 
    driver.findElement(By.linkText("Status")).click();
    // 17 | click | linkText=Attorney Docket Number | 
    driver.findElement(By.linkText("Attorney Docket Number")).click();
    // 18 | click | linkText=First Named Inventor | 
    driver.findElement(By.linkText("First Named Inventor")).click();
    // 19 | click | linkText=Any Named Inventor | 
    driver.findElement(By.linkText("Any Named Inventor")).click();
    // 20 | click | linkText=Confirmation Number | 
    driver.findElement(By.linkText("Confirmation Number")).click();
    // 21 | click | linkText=Status Date | 
    driver.findElement(By.linkText("Status Date")).click();
    // 22 | click | linkText=Patent Issue Date | 
    driver.findElement(By.linkText("Patent Issue Date")).click();
    // 23 | click | linkText=Earliest Publication Date | 
    driver.findElement(By.linkText("Earliest Publication Date")).click();
    // 24 | click | linkText=International Registration Publication Date | 
    driver.findElement(By.linkText("International Registration Publication Date")).click();
    // 25 | click | linkText=WIPO Publication Date | 
    driver.findElement(By.linkText("WIPO Publication Date")).click();
    // 26 | click | linkText=Customer Number | 
    driver.findElement(By.linkText("Customer Number")).click();
    // 27 | click | linkText=Entity Status | 
    driver.findElement(By.linkText("Entity Status")).click();
    // 28 | click | id=faqLink | 
    driver.findElement(By.id("faqLink")).click();
    // 29 | click | id=useManLink | 
    driver.findElement(By.id("useManLink")).click();
    // 30 | click | id=apiDocLink | 
    driver.findElement(By.id("apiDocLink")).click();
    // 31 | click | id=IstheAPIrightformeLink | 
    driver.findElement(By.id("IstheAPIrightformeLink")).click();
    // 32 | click | id=APITutorialLink | 
    driver.findElement(By.id("APITutorialLink")).click();
    // 33 | click | id=DataMappingLink | 
    driver.findElement(By.id("DataMappingLink")).click();
    // 34 | click | id=InputFormatsLink | 
    driver.findElement(By.id("InputFormatsLink")).click();
    // 35 | click | id=ResponseFormatsLink | 
    driver.findElement(By.id("ResponseFormatsLink")).click();
    // 36 | click | id=BundleFileFormatsLink | 
    driver.findElement(By.id("BundleFileFormatsLink")).click();
    // 37 | click | id=InteractiveDocumentationLink | 
    driver.findElement(By.id("InteractiveDocumentationLink")).click();
    // 38 | click | id=SchemaChanges | 
    driver.findElement(By.id("SchemaChanges")).click();
    // 39 | close |  | 
    driver.close();
  }
  @Test
  public void schemaAPIDocumentation() {
    // Test name: Schema - API Documentation
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | id=apiDocLink | 
    driver.findElement(By.id("apiDocLink")).click();
    // 4 | click | id=SchemaChanges | 
    driver.findElement(By.id("SchemaChanges")).click();
    // 5 | click | linkText=here | 
    driver.findElement(By.linkText("here")).click();
    // 6 | close |  | 
    driver.close();
  }
  @Test
  public void schemaFAQ() {
    // Test name: Schema - FAQ
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1366x728 | 
    driver.manage().window().setSize(new Dimension(1366, 728));
    // 3 | click | id=faqLink | 
    driver.findElement(By.id("faqLink")).click();
    // 4 | click | linkText=here | 
    driver.findElement(By.linkText("here")).click();
    // 5 | close |  | 
    driver.close();
  }
  @Test
  public void shemaUserManual() {
    // Test name: Shema - User Manual
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | id=useManLink | 
    driver.findElement(By.id("useManLink")).click();
    // 4 | click | linkText=here | 
    driver.findElement(By.linkText("here")).click();
    // 5 | close |  | 
    driver.close();
  }
  @Test
  public void 25RecordsAppType() {
    // Test name: 25 Records - App Type
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Type | 
    driver.findElement(By.linkText("Application Type")).click();
    // 4 | click | id=appType | 
    driver.findElement(By.id("appType")).click();
    // 5 | close |  | 
    driver.close();
  }
  @Test
  public void 25RecordsUserManualText() {
    // Test name: 25 Records - User Manual - Text
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1050x708 | 
    driver.manage().window().setSize(new Dimension(1050, 708));
    // 3 | click | id=useManLink | 
    driver.findElement(By.id("useManLink")).click();
    // 4 | click | css=.panel > p:nth-child(32) | 
    driver.findElement(By.cssSelector(".panel > p:nth-child(32)")).click();
    // 5 | close |  | 
    driver.close();
  }
  @Test
  public void 25RecordsTextFAQ() {
    // Test name: 25 Records -Text - FAQ
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | id=faqLink | 
    driver.findElement(By.id("faqLink")).click();
    // 4 | click | css=ol:nth-child(5) > li:nth-child(1) > p:nth-child(2) | 
    driver.findElement(By.cssSelector("ol:nth-child(5) > li:nth-child(1) > p:nth-child(2)")).click();
    // 5 | click | css=ol:nth-child(14) > li:nth-child(1) | 
    driver.findElement(By.cssSelector("ol:nth-child(14) > li:nth-child(1)")).click();
    // 6 | close |  | 
    driver.close();
  }
  @Test
  public void 25RecordsDisplayAppIdSearch() {
    // Test name: 25 Records Display - App Id Search
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09*
    driver.findElement(By.id("appId")).sendKeys("09*");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.text-muted:nth-child(27) | 
    driver.findElement(By.cssSelector(".text-muted:nth-child(27)")).click();
    // 8 | click | css=.main | 
    driver.findElement(By.cssSelector(".main")).click();
    // 9 | click | css=.text-muted:nth-child(27) | 
    driver.findElement(By.cssSelector(".text-muted:nth-child(27)")).click();
    // 10 | close |  | 
    driver.close();
  }
  @Test
  public void uIBulkDownloadDeltasetXML() {
    // Test name: UI Bulk Download - Deltaset - XML
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=XML | 
    vars.put("window_handles", driver.getWindowHandles());
    driver.findElement(By.linkText("XML")).click();
    vars.put("win6293", waitForWindow(2000));
  }
  @Test
  public void uIBulkDownloadEntireDatasetXML() {
    // Test name: UI Bulk Download - Entire Dataset - XML
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | css=.btn-group:nth-child(4) > #btn-append-to-single-button | 
    driver.findElement(By.cssSelector(".btn-group:nth-child(4) > #btn-append-to-single-button")).click();
    // 4 | click | linkText=download all | 
    vars.put("window_handles", driver.getWindowHandles());
    driver.findElement(By.linkText("download all")).click();
    vars.put("win3853", waitForWindow(2000));
  }
  @Test
  public void uIBulkDownloadFunctionalitySingleAppIDDeltaXML() {
    // Test name: UI Bulk Download Functionality - Single App ID - Delta XML
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1050x708 | 
    driver.manage().window().setSize(new Dimension(1050, 708));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-default > .caret | 
    driver.findElement(By.cssSelector(".btn-default > .caret")).click();
    // 8 | click | linkText=Delta Download | 
    driver.findElement(By.linkText("Delta Download")).click();
    // 9 | click | id=fromDate | 
    driver.findElement(By.id("fromDate")).click();
    // 10 | click | linkText=1 | 
    driver.findElement(By.linkText("1")).click();
    // 11 | click | id=toDate | 
    driver.findElement(By.id("toDate")).click();
    // 12 | click | linkText=9 | 
    driver.findElement(By.linkText("9")).click();
    // 13 | click | linkText=XML | 
    driver.findElement(By.linkText("XML")).click();
  }
  @Test
  public void uIBulkDownloadFunctionalityWildcardAppIDXML() {
    // Test name: UI Bulk Download Functionality -Wildcard App ID - XML
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 091*
    driver.findElement(By.id("appId")).sendKeys("091*");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-group > .btn-default | 
    driver.findElement(By.cssSelector(".btn-group > .btn-default")).click();
    // 8 | click | linkText=XML | 
    driver.findElement(By.linkText("XML")).click();
  }
  @Test
  public void uIBulkDownloadFunctionalitySingleAppIDXML() {
    // Test name: UI Bulk Download Functionality- Single App ID - XML
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-group > .btn-default | 
    driver.findElement(By.cssSelector(".btn-group > .btn-default")).click();
    // 8 | click | linkText=XML | 
    driver.findElement(By.linkText("XML")).click();
  }
  @Test
  public void uIBulkDownloadDeltasetJSON() {
    // Test name: UI Bulk Download - Deltaset - JSON
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=JSON | 
    vars.put("window_handles", driver.getWindowHandles());
    driver.findElement(By.linkText("JSON")).click();
    vars.put("win6293", waitForWindow(2000));
  }
  @Test
  public void uIBulkDownloadEntireDatasetJSON() {
    // Test name: UI Bulk Download - Entire Dataset - JSON
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | id=btn-append-to-single-button | 
    driver.findElement(By.id("btn-append-to-single-button")).click();
    // 4 | click | linkText=download all | 
    vars.put("window_handles", driver.getWindowHandles());
    driver.findElement(By.linkText("download all")).click();
    vars.put("win8273", waitForWindow(2000));
  }
  @Test
  public void uIBulkDownloadFunctionalitySingleAppJSON() {
    // Test name: UI Bulk Download Functionality - Single App - JSON
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-group > .btn-default | 
    driver.findElement(By.cssSelector(".btn-group > .btn-default")).click();
    // 8 | click | linkText=JSON | 
    driver.findElement(By.linkText("JSON")).click();
  }
  @Test
  public void uIBulkDownloadFunctionalitySingleAppIDDeltaJSON() {
    // Test name: UI Bulk Download Functionality - Single App ID - Delta JSON
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1050x708 | 
    driver.manage().window().setSize(new Dimension(1050, 708));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-default > .caret | 
    driver.findElement(By.cssSelector(".btn-default > .caret")).click();
    // 8 | click | linkText=Delta Download | 
    driver.findElement(By.linkText("Delta Download")).click();
    // 9 | click | id=fromDate | 
    driver.findElement(By.id("fromDate")).click();
    // 10 | click | linkText=1 | 
    driver.findElement(By.linkText("1")).click();
    // 11 | click | id=toDate | 
    driver.findElement(By.id("toDate")).click();
    // 12 | click | linkText=9 | 
    driver.findElement(By.linkText("9")).click();
    // 13 | click | linkText=JSON | 
    driver.findElement(By.linkText("JSON")).click();
  }
  @Test
  public void uIBulkDownloadFunctionalityWildcardAppIDJSON() {
    // Test name: UI Bulk Download Functionality -Wildcard App ID - JSON 
    // Step # | name | target | value
    // 1 | open | https://ped.uspto.gov/peds/ | 
    driver.get("https://ped.uspto.gov/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 091*
    driver.findElement(By.id("appId")).sendKeys("091*");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | css=.btn-group > .btn-default | 
    driver.findElement(By.cssSelector(".btn-group > .btn-default")).click();
    // 8 | click | linkText=JSON | 
    driver.findElement(By.linkText("JSON")).click();
  }
  @Test
  public void cMSDataTabExists() {
    // Test name: CMS Data Tab Exists
    // Step # | name | target | value
    // 1 | open | https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/ | 
    driver.get("https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/");
    // 2 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 3 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 4 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 5 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 6 | click | css=.ng-pristine > .col-md-4 | 
    driver.findElement(By.cssSelector(".ng-pristine > .col-md-4")).click();
    // 7 | click | linkText=APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL | 
    driver.findElement(By.linkText("APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL")).click();
    // 8 | click | css=.ng-pristine > .col-md-4 | 
    driver.findElement(By.cssSelector(".ng-pristine > .col-md-4")).click();
    // 9 | click | linkText=CMS Data | 
    driver.findElement(By.linkText("CMS Data")).click();
    // 10 | close |  | 
    driver.close();
  }
  @Test
  public void cMSDataPDFlink() {
    // Test name: CMS Data - PDF link
    // Step # | name | target | value
    // 1 | open | https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/ | 
    driver.get("https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | linkText=APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL | 
    driver.findElement(By.linkText("APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL")).click();
    // 8 | click | linkText=CMS Data | 
    driver.findElement(By.linkText("CMS Data")).click();
    // 9 | click | linkText=Index of Claims | 
    vars.put("window_handles", driver.getWindowHandles());
    // 10 | storeWindowHandle | root | 
    driver.findElement(By.linkText("Index of Claims")).click();
    // 11 | selectWindow | handle=${win1292} | 
    vars.put("win1292", waitForWindow(2000));
    // 12 | selectWindow | handle=${root} | 
    vars.put("root", driver.getWindowHandle());
    // 13 | selectWindow | handle=${win1292} | 
    driver.switchTo().window(vars.get("win1292").toString());
    // 14 | close |  | 
    driver.switchTo().window(vars.get("root").toString());
    // 15 | selectWindow | handle=${root} | 
    driver.switchTo().window(vars.get("win1292").toString());
    // 16 | close |  | 
    driver.close();
    driver.switchTo().window(vars.get("root").toString());
    driver.close();
  }
  @Test
  public void cMSDataNPLGreyedout() {
    // Test name: CMS Data - NPL Greyed out
    // Step # | name | target | value
    // 1 | open | https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/ | 
    driver.get("https://peds-sit1208-apilb-1226901538.us-east-1.elb.amazonaws.com/peds/");
    // 2 | setWindowSize | 1382x744 | 
    driver.manage().window().setSize(new Dimension(1382, 744));
    // 3 | click | linkText=Application Number | 
    driver.findElement(By.linkText("Application Number")).click();
    // 4 | click | id=appId | 
    driver.findElement(By.id("appId")).click();
    // 5 | type | id=appId | 09123456
    driver.findElement(By.id("appId")).sendKeys("09123456");
    // 6 | sendKeys | id=appId | ${KEY_ENTER}
    driver.findElement(By.id("appId")).sendKeys(Keys.ENTER);
    // 7 | click | linkText=APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL | 
    driver.findElement(By.linkText("APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL")).click();
    // 8 | click | css=.ng-pristine > .col-md-4 | 
    driver.findElement(By.cssSelector(".ng-pristine > .col-md-4")).click();
    // 9 | click | linkText=APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL | 
    driver.findElement(By.linkText("APPARATUS AND METHOD FOR CORRECTING A PHASE OF A SYNCHRONIZING SIGNAL")).click();
    // 10 | click | linkText=CMS Data | 
    driver.findElement(By.linkText("CMS Data")).click();
    // 11 | click | css=.wpsTableNrmRow:nth-child(146) > .ng-binding:nth-child(3) | 
    driver.findElement(By.cssSelector(".wpsTableNrmRow:nth-child(146) > .ng-binding:nth-child(3)")).click();
    // 12 | close |  | 
    driver.close();
  }
}
